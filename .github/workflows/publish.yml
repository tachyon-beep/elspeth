name: Build, Scan, Sign, and Publish

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write  # required for cosign keyless (OIDC) signing

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      COSIGN_KMS_URI: ${{ secrets.COSIGN_KMS_URI }} # optional: e.g., awskms://..., gcpkms://..., azurekeyvault://...
    steps:
      - uses: actions/checkout@v4

      - name: Resolve base image digest (linux/amd64)
        run: |
          docker pull --platform=linux/amd64 python:3.12.12-slim
          DIGEST=$(docker inspect --format='{{range .RepoDigests}}{{println .}}{{end}}' python:3.12.12-slim | grep '^python@sha256:' | head -n1 | cut -d'@' -f2)
          echo "DOCKER_PYTHON_IMAGE=python:3.12.12-slim@${DIGEST}" >> $GITHUB_ENV

      - name: Build runtime image (version tag only)
        run: |
          VERSION=${GITHUB_REF_NAME}
          docker build --build-arg PYTHON_IMAGE=${{ env.DOCKER_PYTHON_IMAGE }} --target runtime -t ghcr.io/${{ github.repository }}:${VERSION} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push runtime image (version tag only)
        run: |
          VERSION=${GITHUB_REF_NAME}
          docker push ghcr.io/${{ github.repository }}:${VERSION}

      - name: Install Syft and Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate image SBOM (CycloneDX JSON)
        run: |
          syft packages ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME} -o cyclonedx-json > sbom-image.json

      - name: "Vulnerability scan (Grype) â€” block on HIGH"
        run: |
          grype ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME} -o sarif --fail-on high > grype.sarif

      - name: Upload Grype SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif
          category: grype

      - name: Upload publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publish-artifacts
          path: |
            sbom-image.json
            grype.sarif

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: "Sign image (required: prefer KMS/key if provided, else keyless OIDC)"
        env:
          COSIGN_EXPERIMENTAL: "1"  # enable keyless OIDC flow
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME}"
          if [ -n "${COSIGN_KMS_URI:-}" ]; then
            echo "Signing with KMS: ${COSIGN_KMS_URI}"
            cosign sign --yes --key "${COSIGN_KMS_URI}" "${IMAGE}"
          elif [ -n "${COSIGN_KEY:-}" ]; then
            echo "Signing with provided key material"
            echo "${COSIGN_KEY}" > cosign.key
            export COSIGN_PASSWORD="${COSIGN_PASSWORD:-}"
            cosign sign --yes --key cosign.key "${IMAGE}"
            rm -f cosign.key
          else
            echo "Signing keylessly via GitHub OIDC"
            cosign sign --yes "${IMAGE}"
          fi

      - name: "Attest SBOM (required: prefer KMS/key if provided, else keyless OIDC)"
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME}"
          test -s sbom-image.json
          if [ -n "${COSIGN_KMS_URI:-}" ]; then
            echo "Attesting with KMS: ${COSIGN_KMS_URI}"
            cosign attest --yes --key "${COSIGN_KMS_URI}" --predicate sbom-image.json --type cyclonedx "${IMAGE}"
          elif [ -n "${COSIGN_KEY:-}" ]; then
            echo "Attesting with provided key material"
            echo "${COSIGN_KEY}" > cosign.key
            export COSIGN_PASSWORD="${COSIGN_PASSWORD:-}"
            cosign attest --yes --key cosign.key --predicate sbom-image.json --type cyclonedx "${IMAGE}"
            rm -f cosign.key
          else
            echo "Attesting keylessly via GitHub OIDC"
            cosign attest --yes --predicate sbom-image.json --type cyclonedx "${IMAGE}"
          fi
