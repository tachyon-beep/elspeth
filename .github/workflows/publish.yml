name: Build, Scan, Sign, and Publish

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
      id-token: write
    concurrency:
      group: publish-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    env:
      COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      COSIGN_KMS_URI: ${{ secrets.COSIGN_KMS_URI }} # optional: e.g., awskms://..., gcpkms://..., azurekeyvault://...
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Read pinned base image digest
        run: |
          if [ ! -f .github/base-image.txt ]; then
            echo "Pinned base image not found. Please run the 'Repin Base Image Digest' workflow or add .github/base-image.txt." >&2
            exit 1
          fi
          echo "DOCKER_PYTHON_IMAGE=$(cat .github/base-image.txt)" >> $GITHUB_ENV

      - name: Build runtime image (version tag only)
        run: |
          VERSION=${GITHUB_REF_NAME}
          docker build --build-arg PYTHON_IMAGE=${{ env.DOCKER_PYTHON_IMAGE }} --target runtime -t ghcr.io/${{ github.repository }}:${VERSION} .

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push runtime image (version tag only)
        run: |
          VERSION=${GITHUB_REF_NAME}
          docker push ghcr.io/${{ github.repository }}:${VERSION}

      - name: Resolve pushed image digest
        id: image_digest
        run: |
          VERSION=${GITHUB_REF_NAME}
          REF=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}:${VERSION})
          DIGEST=${REF#*@}
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Attest image provenance (SLSA)
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.image_digest.outputs.digest }}
          push-to-registry: true

      - name: Generate image SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8
        with:
          image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          format: cyclonedx-json
          output-file: sbom-image.json

      - name: Upload SBOM to GitHub Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          tag_name: ${{ github.ref_name }}
          files: sbom-image.json
          fail_on_unmatched_files: true

      - name: "Vulnerability scan (Grype) — block on HIGH"
        id: grype
        uses: anchore/scan-action@a5605eb0943e46279cb4fbd9d44297355d3520ab # v7.0.2
        with:
          image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          severity-cutoff: high
          fail-build: true
          output-format: sarif
          grype-version: v0.101.1
        env:
          GRYPE_DB_CACHE_DIR: ${{ runner.temp }}/grype-db
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Grype SARIF to code scanning
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # v4.30.9
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: grype

      - name: Upload publish artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: publish-artifacts
          path: |
            sbom-image.json
            ${{ steps.grype.outputs.sarif }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: "Sign image (required: prefer KMS/key if provided, else keyless OIDC)"
        env:
          COSIGN_EXPERIMENTAL: "1" # enable keyless OIDC flow
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME}"
          if [ -n "${COSIGN_KMS_URI:-}" ]; then
            echo "Signing with KMS: ${COSIGN_KMS_URI}"
            cosign sign --yes --key "${COSIGN_KMS_URI}" "${IMAGE}"
          elif [ -n "${COSIGN_KEY:-}" ]; then
            echo "Signing with provided key material"
            echo "${COSIGN_KEY}" > cosign.key
            export COSIGN_PASSWORD="${COSIGN_PASSWORD:-}"
            cosign sign --yes --key cosign.key "${IMAGE}"
            rm -f cosign.key
          else
            echo "Signing keylessly via GitHub OIDC"
            cosign sign --yes "${IMAGE}"
          fi

      - name: Verify image signature
        if: always()
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME}"
          echo "Verifying signature for ${IMAGE}"
          if ! cosign verify --certificate-oidc-issuer https://token.actions.githubusercontent.com "${IMAGE}" | tee cosign-verify.txt; then
            echo "⚠️ Signature verification failed — this can occur briefly after signing (keyless propagation)." >> "$GITHUB_STEP_SUMMARY"
            echo "Please re-try verification manually after a short delay: cosign verify \"${IMAGE}\"" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "✅ Signature verified successfully for ${IMAGE}" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload cosign verification log
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cosign-verify
          path: cosign-verify.txt
          retention-days: 7

      - name: "Attest SBOM (required: prefer KMS/key if provided, else keyless OIDC)"
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ github.repository }}:${GITHUB_REF_NAME}"
          test -s sbom-image.json
          if [ -n "${COSIGN_KMS_URI:-}" ]; then
            echo "Attesting with KMS: ${COSIGN_KMS_URI}"
            cosign attest --yes --key "${COSIGN_KMS_URI}" --predicate sbom-image.json --type cyclonedx "${IMAGE}"
          elif [ -n "${COSIGN_KEY:-}" ]; then
            echo "Attesting with provided key material"
            echo "${COSIGN_KEY}" > cosign.key
            export COSIGN_PASSWORD="${COSIGN_PASSWORD:-}"
            cosign attest --yes --key cosign.key --predicate sbom-image.json --type cyclonedx "${IMAGE}"
            rm -f cosign.key
          else
            echo "Attesting keylessly via GitHub OIDC"
            cosign attest --yes --predicate sbom-image.json --type cyclonedx "${IMAGE}"
          fi
