name: Lint, Tests & Sample Suite

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  secrets-scan:
    name: Secret Scan (gitleaks)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.sarif

  lint-and-test:
    name: Lint, Tests, Supply-Chain Gates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: secrets-scan
    permissions:
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (locked)
        run: |
          python -m pip install --upgrade pip
          python -m pip install pip-tools
          python -m piptools sync requirements-dev.lock
          python -m pip install -e . --no-deps

      - name: Verify environment matches lockfile (dev)
        run: |
          python scripts/verify_locked_install.py -r requirements-dev.lock

      - name: Validate configuration templates (YAML syntax)
        run: |
          python scripts/validate_templates.py

      - name: Lint (ruff + mypy)
        run: python -m ruff check src tests && python -m mypy src

      - name: Security static analysis (bandit)
        run: |
          python -m pip install bandit
          # Fail build on HIGH severity and HIGH confidence findings
          bandit -q -r src --severity-level high --confidence-level high -f json -o bandit.json
      - name: Upload bandit report (JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-json
          path: bandit.json

      - name: Semgrep scan (CLI SARIF, curated)
        run: |
          # Curated, low-noise ruleset, block only ERROR-severity findings
          semgrep --config p/ci --severity ERROR --sarif --output semgrep.sarif
      - name: Upload semgrep report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif
          path: semgrep.sarif
      - name: Upload semgrep SARIF to code scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

      - name: Unit tests with coverage
        run: python -m pytest -m "not slow" --maxfail=1 --disable-warnings --cov-fail-under=80

      - name: Generate SBOM (requirements.lock)
        run: |
          python -m cyclonedx_py requirements requirements.lock --output-format JSON --output-file sbom.json --output-reproducible

      - name: Upload SBOM artefact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-json
          path: sbom.json

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Run pip-audit
        run: pip-audit -r requirements.lock --require-hashes --format json --output pip-audit.json

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json

  sample-suite:
    name: Sample Suite Smoke Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (locked)
        run: |
          python -m pip install --upgrade pip
          python -m pip install pip-tools
          python -m piptools sync requirements-dev.lock
          python -m pip install -e . --no-deps

      - name: Run sample suite smoke test
        run: |
          python -m elspeth.cli \
            --settings config/sample_suite/settings.yaml \
            --suite-root config/sample_suite \
            --head 0 \
            --live-outputs

  container:
    name: Container Build, Test, and SBOMs
    runs-on: ubuntu-latest
    needs: lint-and-test
    timeout-minutes: 30
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Use pinned digest if provided
        id: pinfile
        run: |
          if [ -f .github/base-image.txt ]; then
            echo "Using pinned base image from .github/base-image.txt" && cat .github/base-image.txt
            echo "DOCKER_PYTHON_IMAGE=$(cat .github/base-image.txt)" >> $GITHUB_ENV
          fi

      - name: Resolve base image digest (linux/amd64)
        run: |
          if [ -z "${DOCKER_PYTHON_IMAGE}" ]; then
            docker pull --platform=linux/amd64 python:3.12.12-slim
            DIGEST=$(docker inspect --format='{{range .RepoDigests}}{{println .}}{{end}}' python:3.12.12-slim | grep '^python@sha256:' | head -n1 | cut -d'@' -f2)
            echo "DOCKER_PYTHON_IMAGE=python:3.12.12-slim@${DIGEST}" >> $GITHUB_ENV
          fi

      - name: Build dev/test image
        run: |
          docker build --build-arg PYTHON_IMAGE=${{ env.DOCKER_PYTHON_IMAGE }} --target dev -t elspeth:devtest .

      - name: Run tests in container
        run: |
          docker run --rm elspeth:devtest pytest -m "not slow" --maxfail=1 --disable-warnings --cov-fail-under=80

      - name: Build runtime image
        run: |
          docker build --build-arg PYTHON_IMAGE=${{ env.DOCKER_PYTHON_IMAGE }} --target runtime -t elspeth:runtime .

      - name: Generate runtime SBOM (app graph) inside container
        run: |
          docker run --rm elspeth:devtest sh -c '
            /opt/venv/bin/cyclonedx-py environment --of JSON --output-reproducible -o /tmp/sbom-runtime.json && \
            cat /tmp/sbom-runtime.json' > sbom-runtime.json

      - name: Install Syft and Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate image SBOM (CycloneDX JSON)
        run: |
          syft packages docker:elspeth:runtime -o cyclonedx-json > sbom-image.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-sboms
          path: |
            sbom-runtime.json
            sbom-image.json

      - name: Vulnerability scan (Grype) â€” block on HIGH
        run: |
          grype elspeth:runtime -o sarif --fail-on high > grype.sarif

      - name: Upload Grype SARIF to code scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif
          category: grype

      - name: Upload Grype SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grype-sarif
          path: grype.sarif
