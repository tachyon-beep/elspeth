name: Lint, Tests & Sample Suite

permissions: {}

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  changes:
    name: Detect Changed Paths
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: |
            code:
              - 'src/**'
              - 'tests/**'
              - 'sidecar/**'
              - 'pyproject.toml'
              - 'requirements*.lock'
              - 'Dockerfile'
              - '.github/workflows/**'
            docs:
              - 'docs/**'
              - 'README.md'
              - 'notes/**'
  secrets-scan:
    name: Secret Scan (gitleaks)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional: uncomment to pin CLI version or change behavior
          # GITLEAKS_VERSION: latest
          # GITLEAKS_ENABLE_UPLOAD_ARTIFACT: 'true'
      - name: Upload gitleaks report (if generated)
        if: always() && hashFiles('results.sarif') != ''
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: gitleaks-report
          path: results.sarif
          retention-days: 7

  production-data-guard:
    name: Production Data Guard (orchestration_packs/)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Validate no production data in orchestration_packs/
        run: |
          echo "üîç Scanning orchestration_packs/ for production data..."
          echo ""

          # Find all files in orchestration_packs/, excluding allowed patterns
          DISALLOWED=$(find orchestration_packs/ -type f 2>/dev/null | \
            grep -v -E '(\.gitkeep|README\.md|product_analysis_demo/)' || true)

          if [ -n "$DISALLOWED" ]; then
            echo "‚ùå ERROR: Production data found in orchestration_packs/"
            echo ""
            echo "Blocked files:"
            echo "$DISALLOWED" | sed 's/^/  - /'
            echo ""
            echo "Why this failed:"
            echo "  Only approved demos should be committed to orchestration_packs/"
            echo "  Production runs with real data must NEVER be in the repository"
            echo ""
            echo "Where production data should go:"
            echo "  ‚úÖ outputs/ directory (gitignored)"
            echo "  ‚úÖ CI/CD pipelines (ephemeral)"
            echo "  ‚úÖ Secure artifact storage (external)"
            echo ""
            echo "This is Layer 3 of defense-in-depth (.gitignore + pre-commit + CI)"
            exit 1
          fi

          echo "‚úÖ No production data found - orchestration_packs/ is clean"

  rust-sidecar:
    name: Rust Sidecar (Format, Lint, Test, Build)
    runs-on: ubuntu-latest
    needs: [secrets-scan, changes]
    if: needs.changes.outputs.code == 'true'
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@7b1c307e0dcbda6122208f10795a713336a9b35a # master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@9bdad043e88c75890e36ad3bbc8d27f0090dd609 # v2
        with:
          workspaces: sidecar

      - name: Check Rust formatting
        working-directory: sidecar
        run: cargo fmt --check

      - name: Run Clippy (deny warnings)
        working-directory: sidecar
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust tests
        working-directory: sidecar
        run: cargo test --verbose

      - name: Build sidecar daemon (release)
        working-directory: sidecar
        run: cargo build --release

      - name: Run cargo audit (security advisories)
        working-directory: sidecar
        run: |
          cargo install cargo-audit --locked
          cargo audit --deny warnings

      - name: Upload sidecar binary artifact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: sidecar-daemon
          path: sidecar/target/release/elspeth-sidecar-daemon
          retention-days: 7

  ci-core:
    name: CI Core (Lint, Types, Tests)
    needs: [secrets-scan, rust-sidecar, changes]
    if: github.event_name != 'pull_request' || github.event.pull_request.draft != true
    uses: ./.github/workflows/reusable-ci.yml
    with:
      python-version: "3.12"
    permissions:
      contents: read

  security-scans:
    name: Security Scans (Semgrep, Bandit, SBOM, pip-audit)
    runs-on: ubuntu-latest
    needs: [secrets-scan, changes]
    if: needs.changes.outputs.code == 'true'
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements-dev.lock

      - name: Install dependencies (locked)
        run: |
          python -m pip install -r requirements-dev.lock --require-hashes
          python -m pip install -e . --no-deps --no-index --no-build-isolation

      - name: Verify environment matches lockfile (dev)
        run: |
          python scripts/verify_locked_install.py -r requirements-dev.lock

      - name: Validate configuration templates (YAML syntax)
        run: |
          python scripts/validate_templates.py

      - name: Security static analysis (bandit)
        run: |
          bandit -q -r src --severity-level high --confidence-level high -f json -o bandit.json
      - name: Upload bandit report (JSON)
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: bandit-json
          path: bandit.json
          retention-days: 7

      - name: Semgrep scan (curated, Docker CLI)
        # Semgrep p/ci is the community-curated CI ruleset (not --config auto)
        # for balanced signal/noise in security scans
        run: |
          docker run --rm \
            -v "$PWD:/src" \
            -w /src \
            semgrep/semgrep:1.140.0@sha256:220daf180b5bfb02fb077bc324ec7673d8eb4f3f6dcd7cce1eda1995f564f980 \
            semgrep scan --config p/ci --severity ERROR --metrics=off --sarif --sarif-output semgrep.sarif --error

      - name: Upload semgrep report
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: semgrep-sarif
          path: semgrep.sarif
          retention-days: 7

      - name: Upload semgrep SARIF to code scanning
        if: always()
        uses: github/codeql-action/upload-sarif@4e94bd11f71e507f7f87df81788dff88d1dacbfb # v4.31.0
        with:
          sarif_file: semgrep.sarif
          category: semgrep-oss

      - name: Run pip-audit (CLI)
        run: |
          pip-audit -r requirements.lock --require-hashes --no-deps

      - name: Upload pip-audit SARIF to code scanning (if generated)
        if: always() && hashFiles('pip-audit.sarif') != ''
        uses: github/codeql-action/upload-sarif@4e94bd11f71e507f7f87df81788dff88d1dacbfb # v4.31.0
        with:
          sarif_file: pip-audit.sarif
          category: pip-audit

      - name: Upload pip-audit artifact (if generated)
        if: always() && hashFiles('pip-audit.sarif') != ''
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: pip-audit-sarif
          path: pip-audit.sarif
          retention-days: 7

      - name: Generate SBOM (requirements.lock)
        run: |
          python -m cyclonedx_py requirements requirements.lock --of JSON --output-file sbom.json --output-reproducible

      - name: Upload SBOM artefact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: sbom-json
          path: sbom.json
          retention-days: 7

  sample-suite:
    name: Sample Suite Smoke Test
    runs-on: ubuntu-latest
    needs: [ci-core, security-scans, changes]
    timeout-minutes: 20
    if: needs.changes.outputs.code == 'true'
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements-dev.lock

      - name: Install dependencies (locked)
        run: |
          python -m pip install -r requirements-dev.lock --require-hashes
          python -m pip install -e . --no-deps --no-index --no-build-isolation

      - name: Run sample suite smoke test
        run: |
          python -m elspeth.cli \
            --settings config/sample_suite/settings.yaml \
            --suite-root config/sample_suite \
            --head 0 \
            --live-outputs

  container:
    name: Container Build, Test, and SBOMs
    runs-on: ubuntu-latest
    needs: [ci-core, security-scans, changes]
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    if: needs.changes.outputs.code == 'true'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Use pinned digest if provided
        id: pinfile
        run: |
          if [ -f .github/base-image.txt ]; then
            echo "Using pinned base image from .github/base-image.txt" && cat .github/base-image.txt
            echo "DOCKER_PYTHON_IMAGE=$(cat .github/base-image.txt)" >> $GITHUB_ENV
          fi
      - name: Ensure pinned base image is configured
        run: |
          if [ -z "${DOCKER_PYTHON_IMAGE}" ]; then
            echo "Pinned base image not found. Please run the 'Repin Base Image Digest' workflow or add .github/base-image.txt." >&2
            exit 1
          fi

      - name: Build dev/test image
        run: |
          docker build --build-arg PYTHON_IMAGE=$DOCKER_PYTHON_IMAGE --target dev -t elspeth:devtest .

      - name: Container smoke test
        run: |
          docker run --rm elspeth:devtest python -m elspeth.cli --help > /dev/null

      # ========================================================================
      # Container E2E Integration Tests
      # Run comprehensive end-to-end tests inside the dev container
      # ========================================================================

      - name: Run unit tests inside container
        run: |
          echo "Running unit tests inside container..."
          docker run --rm elspeth:devtest \
            python -m pytest tests/ -v --maxfail=5 \
            -m "not slow and not integration" \
            --tb=short

      - name: Run sidecar integration tests inside container
        run: |
          echo "Running sidecar integration tests inside container..."
          docker run --rm \
            -e ELSPETH_RUN_INTEGRATION_TESTS=1 \
            elspeth:devtest \
            python -m pytest tests/test_sidecar_integration.py -v --tb=short

      - name: Test sidecar daemon standalone mode
        run: |
          echo "Testing sidecar daemon in standalone mode..."
          docker run --rm \
            -e ELSPETH_SIDECAR_MODE=standalone \
            elspeth:devtest \
            timeout 10 /usr/local/bin/elspeth-sidecar /etc/elspeth/sidecar.toml || \
            ([ $? -eq 124 ] && echo "‚úì Daemon ran for 10s without crash (timeout expected)")

      - name: Test multi-process container with supervisord
        run: |
          echo "Testing full multi-process deployment with supervisord..."

          # Start container with supervisord in detached mode
          CONTAINER_ID=$(docker run -d \
            --name elspeth-e2e-test \
            --health-cmd="python /workspace/scripts/container_healthcheck.py" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=3 \
            elspeth:devtest \
            /usr/local/bin/entrypoint.sh)

          echo "Container started: $CONTAINER_ID"

          # Wait for container to be healthy (max 30s)
          echo "Waiting for container health check..."
          for i in {1..30}; do
            HEALTH=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID 2>/dev/null || echo "unknown")
            echo "  Attempt $i/30: Health status = $HEALTH"

            if [ "$HEALTH" = "healthy" ]; then
              echo "‚úì Container is healthy!"
              break
            elif [ "$HEALTH" = "unhealthy" ]; then
              echo "‚úó Container became unhealthy"
              docker logs $CONTAINER_ID
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
              exit 1
            fi

            if [ $i -eq 30 ]; then
              echo "‚úó Container did not become healthy within 30s"
              echo "Container logs:"
              docker logs $CONTAINER_ID
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
              exit 1
            fi

            sleep 1
          done

          # Verify sidecar daemon is running
          echo "Verifying sidecar daemon is running..."
          docker exec $CONTAINER_ID pgrep -f elspeth-sidecar || \
            (echo "‚úó Sidecar daemon not running"; docker logs $CONTAINER_ID; exit 1)
          echo "‚úì Sidecar daemon is running"

          # Verify socket exists
          echo "Verifying sidecar socket exists..."
          docker exec $CONTAINER_ID test -S /run/sidecar/auth.sock || \
            (echo "‚úó Sidecar socket not found"; docker logs $CONTAINER_ID; exit 1)
          echo "‚úì Sidecar socket exists at /run/sidecar/auth.sock"

          # Run end-to-end integration tests inside running container
          echo "Running E2E integration tests inside running container..."
          docker exec \
            -e ELSPETH_RUN_INTEGRATION_TESTS=1 \
            $CONTAINER_ID \
            python -m pytest tests/test_sidecar_integration.py -v --tb=short

          echo "‚úì All E2E integration tests passed!"

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Test container healthcheck script
        run: |
          echo "Testing container healthcheck script..."

          # Test standalone mode health check
          docker run --rm \
            -e ELSPETH_SIDECAR_MODE=standalone \
            elspeth:devtest \
            python /workspace/scripts/container_healthcheck.py
          echo "‚úì Standalone mode health check passed"

          # Test sidecar mode health check (daemon must be running)
          # Start daemon in background, run healthcheck, kill daemon
          docker run --rm \
            elspeth:devtest \
            bash -c '
              /usr/local/bin/elspeth-sidecar /etc/elspeth/sidecar.toml &
              DAEMON_PID=$!
              sleep 2
              python /workspace/scripts/container_healthcheck.py
              HEALTH_EXIT=$?
              kill $DAEMON_PID
              exit $HEALTH_EXIT
            '
          echo "‚úì Sidecar mode health check passed"

      - name: Verify container security (3-UID model)
        run: |
          echo "Verifying 3-UID privilege separation..."
          docker run --rm elspeth:devtest bash -c '
            echo "Checking UID assignments:"
            id appuser | tee /dev/stderr | grep -q "uid=1000"
            id sidecar | tee /dev/stderr | grep -q "uid=1001"
            id appplugin | tee /dev/stderr | grep -q "uid=1002"

            echo "Checking sidecar directory permissions:"
            test -d /run/sidecar || echo "Note: /run/sidecar/ created at runtime by entrypoint"

            echo "Checking sidecar binary permissions:"
            ls -l /usr/local/bin/elspeth-sidecar | tee /dev/stderr | grep -q "rwxr-xr-x"

            echo "‚úì 3-UID security model verified"
          '

      - name: Verify FD_CLOEXEC on container sidecar socket
        run: |
          echo "Verifying FD_CLOEXEC is set on sidecar socket..."
          docker run --rm elspeth:devtest bash -c '
            /usr/local/bin/elspeth-sidecar /etc/elspeth/sidecar.toml &
            DAEMON_PID=$!
            sleep 2

            # Run Rust tests that verify FD_CLOEXEC
            cd /workspace
            cargo test --manifest-path=sidecar/Cargo.toml test_unix_socket_has_fd_cloexec -- --nocapture || true

            kill $DAEMON_PID
            echo "‚úì FD_CLOEXEC verification complete"
          ' || echo "‚ö† FD_CLOEXEC test skipped (Rust not in dev image)"

      - name: Test DoS protection (request size limits)
        run: |
          echo "Testing DoS protection (request size limits)..."
          docker run --rm \
            -e ELSPETH_RUN_INTEGRATION_TESTS=1 \
            elspeth:devtest \
            python -m pytest tests/test_sidecar_integration.py::test_oversized_request_rejected -v
          echo "‚úì DoS protection verified"

      - name: Container E2E logs on failure
        if: failure()
        run: |
          echo "=== Container logs from failed E2E test ==="
          docker logs elspeth-e2e-test 2>/dev/null || echo "Container already cleaned up"

          echo ""
          echo "=== Available images ==="
          docker images | grep elspeth || echo "No elspeth images found"

      # ========================================================================
      # End of Container E2E Integration Tests
      # ========================================================================

      - name: Build runtime image
        run: |
          docker build --build-arg PYTHON_IMAGE=$DOCKER_PYTHON_IMAGE --target runtime -t elspeth:runtime .

      - name: Generate runtime SBOM (app graph) inside container
        run: |
          docker run --rm \
            -v "$PWD/pyproject.toml:/tmp/pyproject.toml:ro" \
            elspeth:devtest sh -c '
              /opt/venv/bin/cyclonedx-py environment --pyproject /tmp/pyproject.toml --of JSON --output-reproducible -o /tmp/sbom-runtime.json && \
              cat /tmp/sbom-runtime.json' > sbom-runtime.json

      # Replace curl|sh installers with pinned GitHub Actions for Syft and Grype
      - name: Generate image SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84 # v0.20.9
        with:
          image: elspeth:runtime
          format: cyclonedx-json
          output-file: sbom-image.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: container-sboms
          path: |
            sbom-runtime.json
            sbom-image.json
          retention-days: 7

      - name: Vulnerability scan (Grype) - block on HIGH
        id: grype
        uses: anchore/scan-action@568b89d27fc18c60e56937bff480c91c772cd993 # v7.1.0
        with:
          image: elspeth:runtime
          severity-cutoff: high
          fail-build: true
          output-format: sarif
          grype-version: v0.101.1
        env:
          GRYPE_DB_CACHE_DIR: ${{ runner.temp }}/grype-db
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Grype SARIF to code scanning
        if: always() && steps.grype.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@4e94bd11f71e507f7f87df81788dff88d1dacbfb # v4.31.0
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: grype

      - name: Upload Grype SARIF artifact
        if: always() && steps.grype.outputs.sarif != ''
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: grype-sarif
          path: ${{ steps.grype.outputs.sarif }}
          retention-days: 7

  preview-image:
    name: PR Preview Image (GHCR)
    runs-on: ubuntu-latest
    needs: [container]
    permissions:
      contents: read
      packages: write
      pull-requests: write
    if: >-
      github.event_name == 'pull_request' &&
      github.event.pull_request.draft != true &&
      github.event.pull_request.head.repo.fork == false &&
      needs.changes.outputs.code == 'true'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Use pinned digest if provided
        id: pinfile
        run: |
          if [ -f .github/base-image.txt ]; then
            echo "Using pinned base image from .github/base-image.txt" && cat .github/base-image.txt
            echo "DOCKER_PYTHON_IMAGE=$(cat .github/base-image.txt)" >> $GITHUB_ENV
          fi
      - name: Ensure pinned base image is configured
        run: |
          if [ -z "${DOCKER_PYTHON_IMAGE}" ]; then
            echo "Pinned base image not found. Please run the 'Repin Base Image Digest' workflow or add .github/base-image.txt." >&2
            exit 1
          fi

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build preview image (runtime)
        env:
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          REPO_LOWER=$(echo "${REPO}" | tr '[:upper:]' '[:lower:]')
          docker build --build-arg PYTHON_IMAGE=$DOCKER_PYTHON_IMAGE --target runtime -t ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER} .

      - name: Push preview image
        env:
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          REPO_LOWER=$(echo "${REPO}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER}

      - name: Summarize preview image
        env:
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          REPO_LOWER=$(echo "${REPO}" | tr '[:upper:]' '[:lower:]')
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## üê≥ PR Preview Image

          **Tag:** \`ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER}\`

          **Pull and run locally:**
          \`\`\`bash
          docker pull ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER}
          docker run --rm ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER} python -m elspeth.cli --help
          \`\`\`
          EOF
      - name: Comment on PR with preview image
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          REPO_LOWER=$(echo "${REPO}" | tr '[:upper:]' '[:lower:]')

          body=$(cat << EOT
          ### üê≥ PR Preview Image Available

          **Tag:** \`ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER}\`

          **Pull and run locally:**
          \`\`\`bash
          docker pull ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER}
          docker run --rm ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER} python -m elspeth.cli --help
          \`\`\`

          **Run an experiment:**
          \`\`\`bash
          docker run --rm -v \$(pwd)/config:/config ghcr.io/${REPO_LOWER}:pr-${PR_NUMBER} \\
            python -m elspeth.cli --settings /config/settings.yaml
          \`\`\`
          EOT
          )
          gh pr comment "$PR_NUMBER" --repo "$REPO" --body "$body"
