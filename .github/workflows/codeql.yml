name: CodeQL Static Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Mondays at 02:00 UTC

permissions:
  contents: read

concurrency:
  group: codeql-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze (CodeQL)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@16140ae1a102900babc80a33c44059580f687047 # v4.30.9
        with:
          languages: python

      - name: Autobuild (Python)
        uses: github/codeql-action/autobuild@16140ae1a102900babc80a33c44059580f687047 # v4.30.9

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@16140ae1a102900babc80a33c44059580f687047 # v4.30.9
        with:
          category: '/language:python'

      - name: Summarize CodeQL alerts
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # set -x  # Uncomment for debugging
          set -euo pipefail
          REPO="${{ github.repository }}"
          EVENT_NAME="${{ github.event_name }}"
          # Use a branch ref for PRs; API expects refs/heads/<branch>
          if [ "$EVENT_NAME" = "pull_request" ]; then
            REF_FILTER="refs/heads/${{ github.head_ref }}"
          else
            REF_FILTER="${{ github.ref }}"
          fi
          echo "## CodeQL Findings" >> "$GITHUB_STEP_SUMMARY"
          echo "- Ref: ${REF_FILTER}" >> "$GITHUB_STEP_SUMMARY"
          tmp=$(mktemp)
          ok=0
          for attempt in {1..5}; do
            if gh api -H "Accept: application/vnd.github+json" \
              repos/${REPO}/code-scanning/alerts -F tool_name=CodeQL -F ref="${REF_FILTER}" -F per_page=100 > "$tmp" 2>/dev/null; then
              ok=1
              break
            fi
            echo "Attempt ${attempt}/5 failed, retrying in 5s..." >&2
            sleep 5
          done
          used_fallback=0
          if [ "$ok" -ne 1 ]; then
            # Fallback without ref filter (e.g., PR merge refs)
            if ! gh api -H "Accept: application/vnd.github+json" \
              repos/${REPO}/code-scanning/alerts -F tool_name=CodeQL -F per_page=100 > "$tmp" 2>/dev/null; then
              # Try to provide rate limit context if available
              REMAINING=$(gh api rate_limit --jq '.resources.core.remaining' 2>/dev/null || echo "")
              if [ -n "$REMAINING" ]; then
                echo "Unable to fetch alerts (insufficient permissions or none present). Rate limit remaining: ${REMAINING}" >> "$GITHUB_STEP_SUMMARY"
              else
                echo "Unable to fetch alerts (insufficient permissions or none present)." >> "$GITHUB_STEP_SUMMARY"
              fi
              exit 0
            fi
            used_fallback=1
          fi
          # Ensure we got a JSON array; otherwise, avoid jq errors
          if ! jq -e 'type=="array"' "$tmp" >/dev/null 2>&1; then
            echo "No alerts returned or access denied." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          total=$(jq 'length' "$tmp")
          open=$(jq '[.[] | select(.state=="open")] | length' "$tmp")
          if [ "$used_fallback" -eq 1 ]; then
            echo "- Alerts: ${total} (open: ${open}) — fallback (repo-wide) query used" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Alerts: ${total} (open: ${open})" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ "$total" -eq 0 ]; then
            echo "✅ No CodeQL alerts found!" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          # Render a small table of severities
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
          for sev in error warning note; do
            cnt=$(jq --arg s "$sev" '[.[] | select(.state=="open" and .rule.severity==$s)] | length' "$tmp")
            icon="⚠️"; if [ "$sev" = "error" ]; then icon="❌"; fi; if [ "$sev" = "note" ]; then icon="ℹ️"; fi
            echo "| ${icon} ${sev} | ${cnt} |" >> "$GITHUB_STEP_SUMMARY"
          done
          for sev in error warning note; do
            cnt=$(jq --arg s "$sev" '[.[] | select(.state=="open" and .rule.severity==$s)] | length' "$tmp")
            echo "  - ${sev}: ${cnt}" >> "$GITHUB_STEP_SUMMARY"
          done
          printf "\nTop open alerts:\n" >> "$GITHUB_STEP_SUMMARY"
          jq -r '.[] | select(.state=="open") | "* [\(.rule.severity|ascii_upcase)] \(.rule.id) - \(.rule.description) — \(.most_recent_instance.location.path // "")"' "$tmp" | head -n 15 >> "$GITHUB_STEP_SUMMARY"
