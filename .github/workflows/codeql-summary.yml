name: CodeQL Summary

on:
  workflow_run:
    workflows: ["CodeQL Static Analysis"]
    types: [completed]

permissions: {}

jobs:
  summarize:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      security-events: read
    steps:
      - name: Summarize CodeQL alerts via API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.event.workflow_run.repository.full_name }}
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          # set -x  # Uncomment for debugging
          set -euo pipefail
          REF_FILTER="refs/heads/${HEAD_BRANCH}"
          echo "## CodeQL Findings" >> "$GITHUB_STEP_SUMMARY"
          echo "- Ref: ${REF_FILTER}" >> "$GITHUB_STEP_SUMMARY"
          tmp=$(mktemp)
          ok=0
          for attempt in {1..5}; do
            if gh api -H "Accept: application/vnd.github+json" \
              repos/${REPO}/code-scanning/alerts -F tool_name=CodeQL -F ref="${REF_FILTER}" -F per_page=100 > "$tmp" 2>/dev/null; then
              ok=1
              break
            fi
            if [ "$attempt" -lt 5 ]; then
              echo "Attempt ${attempt}/5 failed, retrying in 5s..." >&2
              sleep 5
            else
              echo "All 5 attempts failed, trying fallback query..." >&2
            fi
          done
          used_fallback=0
          if [ "$ok" -ne 1 ]; then
            # Fallback to repo-wide alerts (covers merge refs/forks)
            if ! gh api -H "Accept: application/vnd.github+json" \
              repos/${REPO}/code-scanning/alerts -F tool_name=CodeQL -F per_page=100 > "$tmp" 2>/dev/null; then
              REMAINING=$(gh api rate_limit --jq '.resources.core.remaining' 2>/dev/null || echo "")
              if [ -n "$REMAINING" ]; then
                echo "Unable to fetch alerts (insufficient permissions or none present). Rate limit remaining: ${REMAINING}" >> "$GITHUB_STEP_SUMMARY"
              else
                echo "Unable to fetch alerts (insufficient permissions or none present)." >> "$GITHUB_STEP_SUMMARY"
              fi
              exit 0
            fi
            used_fallback=1
          fi
          # Ensure JSON array
          if ! jq -e 'type=="array"' "$tmp" >/dev/null 2>&1; then
            echo "No alerts returned or access denied." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          total=$(jq 'length' "$tmp")
          open=$(jq '[.[] | select(.state=="open")] | length' "$tmp")
          if [ "$used_fallback" -eq 1 ]; then
            echo "- Alerts: ${total} (open: ${open}) — fallback (repo-wide) query used" >> "$GITHUB_STEP_SUMMARY"
            echo "⚠️ Note: Showing repo-wide alerts (ref-specific query unavailable)" >> "$GITHUB_STEP_SUMMARY"
            echo "This may include alerts from other branches." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Alerts: ${total} (open: ${open})" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ "$total" -eq 0 ]; then
            echo "✅ No CodeQL alerts found!" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Severity | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
          for sev in error warning note; do
            cnt=$(jq --arg s "$sev" '[.[] | select(.state=="open" and .rule.severity==$s)] | length' "$tmp")
            case "$sev" in
              error) icon="❌" ;;
              note)  icon="ℹ️" ;;
              *)     icon="⚠️" ;;
            esac
            echo "| ${icon} ${sev} | ${cnt} |" >> "$GITHUB_STEP_SUMMARY"
          done
          printf "\nTop open alerts:\n" >> "$GITHUB_STEP_SUMMARY"
          jq -r '.[] | select(.state=="open") | "* [\(.rule.severity|ascii_upcase)] \(.rule.id) - \(.rule.description) — \(.most_recent_instance.location.path // "")"' "$tmp" | head -n 15 >> "$GITHUB_STEP_SUMMARY"
