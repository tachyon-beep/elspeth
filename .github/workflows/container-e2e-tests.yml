name: Container E2E Integration Tests

# Run container-based end-to-end tests on every PR and main push
# This verifies the full containerized deployment: supervisord + sidecar daemon + orchestrator

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'sidecar/**'
      - 'Dockerfile'
      - 'docker/**'
      - 'requirements*.lock'
      - '.github/workflows/container-e2e-tests.yml'
  push:
    branches:
      - main

permissions: {}

concurrency:
  group: container-e2e-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  container-e2e:
    name: Container E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Read pinned base image digest
        run: |
          if [ -f .github/base-image.txt ]; then
            echo "DOCKER_PYTHON_IMAGE=$(cat .github/base-image.txt)" >> $GITHUB_ENV
          else
            echo "DOCKER_PYTHON_IMAGE=python:3.12.12-slim" >> $GITHUB_ENV
          fi

      - name: Build dev container
        run: |
          docker build \
            --build-arg PYTHON_IMAGE=${{ env.DOCKER_PYTHON_IMAGE }} \
            --target dev \
            -t elspeth-dev:test \
            .

      - name: Verify container starts successfully
        run: |
          echo "Testing container startup..."
          docker run --rm elspeth-dev:test python -c "import elspeth; print(f'Elspeth version: {elspeth.__version__}')"

      - name: Run unit tests inside container
        run: |
          echo "Running unit tests inside container..."
          docker run --rm elspeth-dev:test \
            python -m pytest tests/ -v --maxfail=5 \
            -m "not slow and not integration" \
            --tb=short

      - name: Run sidecar integration tests inside container
        run: |
          echo "Running sidecar integration tests inside container..."
          docker run --rm \
            -e ELSPETH_RUN_INTEGRATION_TESTS=1 \
            elspeth-dev:test \
            python -m pytest tests/test_sidecar_integration.py -v --tb=short

      - name: Test sidecar daemon standalone mode
        run: |
          echo "Testing sidecar daemon in standalone mode..."
          docker run --rm \
            -e ELSPETH_SIDECAR_MODE=standalone \
            elspeth-dev:test \
            timeout 10 /usr/local/bin/elspeth-sidecar /etc/elspeth/sidecar.toml || \
            ([ $? -eq 124 ] && echo "✓ Daemon ran for 10s without crash (timeout expected)")

      - name: Test multi-process container with supervisord
        run: |
          echo "Testing full multi-process deployment with supervisord..."

          # Start container with supervisord in detached mode
          CONTAINER_ID=$(docker run -d \
            --name elspeth-e2e-test \
            --health-cmd="python /workspace/scripts/container_healthcheck.py" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=3 \
            elspeth-dev:test \
            /usr/local/bin/entrypoint.sh)

          echo "Container started: $CONTAINER_ID"

          # Wait for container to be healthy (max 30s)
          echo "Waiting for container health check..."
          for i in {1..30}; do
            HEALTH=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID 2>/dev/null || echo "unknown")
            echo "  Attempt $i/30: Health status = $HEALTH"

            if [ "$HEALTH" = "healthy" ]; then
              echo "✓ Container is healthy!"
              break
            elif [ "$HEALTH" = "unhealthy" ]; then
              echo "✗ Container became unhealthy"
              docker logs $CONTAINER_ID
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
              exit 1
            fi

            if [ $i -eq 30 ]; then
              echo "✗ Container did not become healthy within 30s"
              echo "Container logs:"
              docker logs $CONTAINER_ID
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
              exit 1
            fi

            sleep 1
          done

          # Verify sidecar daemon is running
          echo "Verifying sidecar daemon is running..."
          docker exec $CONTAINER_ID pgrep -f elspeth-sidecar || \
            (echo "✗ Sidecar daemon not running"; docker logs $CONTAINER_ID; exit 1)
          echo "✓ Sidecar daemon is running"

          # Verify socket exists
          echo "Verifying sidecar socket exists..."
          docker exec $CONTAINER_ID test -S /run/sidecar/auth.sock || \
            (echo "✗ Sidecar socket not found"; docker logs $CONTAINER_ID; exit 1)
          echo "✓ Sidecar socket exists at /run/sidecar/auth.sock"

          # Run end-to-end integration tests inside running container
          echo "Running E2E integration tests inside running container..."
          docker exec \
            -e ELSPETH_RUN_INTEGRATION_TESTS=1 \
            $CONTAINER_ID \
            python -m pytest tests/test_sidecar_integration.py -v --tb=short

          echo "✓ All E2E integration tests passed!"

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Test container healthcheck script
        run: |
          echo "Testing container healthcheck script..."

          # Test standalone mode health check
          docker run --rm \
            -e ELSPETH_SIDECAR_MODE=standalone \
            elspeth-dev:test \
            python /workspace/scripts/container_healthcheck.py
          echo "✓ Standalone mode health check passed"

          # Test sidecar mode health check (daemon must be running)
          # Start daemon in background, run healthcheck, kill daemon
          docker run --rm \
            elspeth-dev:test \
            bash -c '
              /usr/local/bin/elspeth-sidecar /etc/elspeth/sidecar.toml &
              DAEMON_PID=$!
              sleep 2
              python /workspace/scripts/container_healthcheck.py
              HEALTH_EXIT=$?
              kill $DAEMON_PID
              exit $HEALTH_EXIT
            '
          echo "✓ Sidecar mode health check passed"

      - name: Verify container security (3-UID model)
        run: |
          echo "Verifying 3-UID privilege separation..."
          docker run --rm elspeth-dev:test bash -c '
            echo "Checking UID assignments:"
            id appuser | tee /dev/stderr | grep -q "uid=1000"
            id sidecar | tee /dev/stderr | grep -q "uid=1001"
            id appplugin | tee /dev/stderr | grep -q "uid=1002"

            echo "Checking sidecar directory permissions:"
            test -d /run/sidecar || echo "Note: /run/sidecar/ created at runtime by entrypoint"

            echo "Checking sidecar binary permissions:"
            ls -l /usr/local/bin/elspeth-sidecar | tee /dev/stderr | grep -q "rwxr-xr-x"

            echo "✓ 3-UID security model verified"
          '

      - name: Verify FD_CLOEXEC on container sidecar socket
        run: |
          echo "Verifying FD_CLOEXEC is set on sidecar socket..."
          docker run --rm elspeth-dev:test bash -c '
            /usr/local/bin/elspeth-sidecar /etc/elspeth/sidecar.toml &
            DAEMON_PID=$!
            sleep 2

            # Run Rust tests that verify FD_CLOEXEC
            cd /workspace
            cargo test --manifest-path=sidecar/Cargo.toml test_unix_socket_has_fd_cloexec -- --nocapture || true

            kill $DAEMON_PID
            echo "✓ FD_CLOEXEC verification complete"
          ' || echo "⚠ FD_CLOEXEC test skipped (Rust not in dev image)"

      - name: Test DoS protection (request size limits)
        run: |
          echo "Testing DoS protection (request size limits)..."
          docker run --rm \
            -e ELSPETH_RUN_INTEGRATION_TESTS=1 \
            elspeth-dev:test \
            python -m pytest tests/test_sidecar_integration.py::test_oversized_request_rejected -v
          echo "✓ DoS protection verified"

      - name: Container logs on failure
        if: failure()
        run: |
          echo "=== Container logs from failed test ==="
          docker logs elspeth-e2e-test || echo "Container already cleaned up"

          echo ""
          echo "=== Available images ==="
          docker images | grep elspeth || echo "No elspeth images found"

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: container-e2e-logs
          path: |
            /tmp/container-logs-*.txt
          retention-days: 7
          if-no-files-found: ignore
