[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "elspeth"
version = "0.1.0"
description = "ELSPETH secure LLM orchestration platform"
authors = [
  { name = "ELSPETH Team" }
]
requires-python = ">=3.12"
dependencies = [
  # Core dependencies: versions pinned for reference only (latest stable/LTS as of current lockfiles).
  # For reproducible installs, always sync from the lockfile (requirements*.lock); do not rely on these pins.
  "azure-identity==1.25.1",
  "azure-storage-blob==12.27.0",
  "azure-search-documents==11.6.0",  # Azure Cognitive Search for RAG
  "psycopg==3.2.10",          # PostgreSQL with pgvector support
  "pandas==2.3.3",
  "pydantic==2.12.2",
  "pyyaml==6.0.3",
  "openai==2.4.0",
  "requests==2.32.5",
  "jinja2==3.1.6",
  "jsonschema==4.25.1",

  # Plugin functionality - always available
  "scipy==1.16.2",           # Stats core, distribution analysis
  "openpyxl==3.1.5",         # Excel sink plugin
  "matplotlib==3.10.7",      # Visual analytics sinks
  "seaborn==0.13.2",         # Enhanced visual analytics
  "pingouin==0.5.5",         # Agreement metrics (referee_alignment)
  "statsmodels==0.14.5",     # Power analysis and planning
]

[project.optional-dependencies]
dev = [
  "pytest==8.4.2",
  "pytest-mock==3.15.1",
  "pytest-cov==7.0.0",
  "pytest-asyncio==1.2.0",
  "pandas-stubs==2.3.2.250926",
  "ruff==0.14.1",
  "mypy==1.18.2",
  "types-requests==2.32.4.20250913",
  "types-PyYAML==6.0.12.20250915",
  "pip-tools==7.5.1",
  "pip-audit==2.9.0",
  "cyclonedx-bom==7.2.0",
  "bandit==1.8.6",
  "semgrep==1.92.0",
]
# Azure ML integration (truly optional - external infrastructure)
azure = [
  "azureml-core==1.60.0.post1",
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["elspeth*"]
exclude = ["tests", "old", "notes", "config"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
elspeth = ["py.typed"]

[tool.pytest.ini_options]
addopts = "-ra --cov=elspeth --cov-branch --cov-report=term-missing"
testpaths = ["tests"]
markers = [
  "integration: marks tests that require external services such as pgvector",
  "slow: marks tests that are slow to run and may be excluded from CI",
]

[tool.ruff]
line-length = 140
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I"]
# Relax overly strict defaults for this codebase; ignore line length (E501) to accommodate long URLs,
# LLM prompt templates, and other cases where longer lines are necessary; enforce functional errors and import hygiene.
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
# Allow tests to carry helper imports and flexible styles
"tests/**" = ["F401", "I001", "E501", "F811"]

[tool.ruff.lint.isort]
known-first-party = ["elspeth"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
explicit_package_bases = true
mypy_path = ["src"]

# Coverage.py configuration to make report paths relative for CI importers (SonarCloud)
[tool.coverage.run]
branch = true
relative_files = true
source = ["src/elspeth"]

[tool.coverage.report]
skip_empty = true
show_missing = false

[[tool.mypy.overrides]]
module = [
    "azure.*",
    "azureml.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "pingouin.*",
    "statsmodels.*",
    "psycopg",
]
ignore_missing_imports = true

# Phase-in stricter typing for core utilities and registries
[[tool.mypy.overrides]]
module = [
  "elspeth.core.utils.*",
  "elspeth.core.registries.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

# Next wave: tools package
[[tool.mypy.overrides]]
module = [
  "elspeth.tools.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

# Core base package
[[tool.mypy.overrides]]
module = [
  "elspeth.core.base.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

# Core experiments (phase in config and registries first)
[[tool.mypy.overrides]]
module = [
  "elspeth.core.experiments.config",
  "elspeth.core.experiments.experiment_registries",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.core.experiments.tools",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.core.experiments.plugin_registry",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.core.experiments.runner",
  "elspeth.core.experiments.suite_runner",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.core.controls.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.core.prompts.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.plugins.nodes.sinks.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.plugins.nodes.transforms.llm.*",
  "elspeth.plugins.nodes.transforms.llm.middleware.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.adapters.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "elspeth.plugins.utilities.retrieval",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true
