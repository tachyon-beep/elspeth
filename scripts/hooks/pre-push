#!/bin/bash
# Pre-push hook: Enforce lint and test quality gates
# This prevents pushing code that doesn't pass basic quality checks

set -e  # Exit on first error

echo "🔍 Running pre-push quality checks..."
echo ""

# Store current directory
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track failures
FAILED=0

# ============================================================
# Python Linting
# ============================================================
echo "📋 Running Python linting (ruff)..."
if ! python -m ruff check src tests; then
    echo -e "${RED}❌ Python linting failed${NC}"
    echo "   Fix with: python -m ruff check src tests --fix"
    FAILED=1
else
    echo -e "${GREEN}✅ Python linting passed${NC}"
fi
echo ""

# ============================================================
# Rust Formatting (if sidecar exists)
# ============================================================
if [ -d "sidecar" ]; then
    echo "🦀 Running Rust formatting (rustfmt)..."
    cd sidecar
    if ! cargo fmt --check; then
        echo -e "${RED}❌ Rust formatting failed${NC}"
        echo "   Fix with: cargo fmt"
        FAILED=1
    else
        echo -e "${GREEN}✅ Rust formatting passed${NC}"
    fi
    cd "$REPO_ROOT"
    echo ""
fi

# ============================================================
# Rust Linting (if sidecar exists)
# ============================================================
if [ -d "sidecar" ]; then
    echo "🦀 Running Rust linting (clippy)..."
    cd sidecar
    if ! cargo clippy --all-targets --all-features -- -D warnings; then
        echo -e "${RED}❌ Rust linting failed${NC}"
        echo "   Fix with: cargo clippy --fix"
        FAILED=1
    else
        echo -e "${GREEN}✅ Rust linting passed${NC}"
    fi
    cd "$REPO_ROOT"
    echo ""
fi

# ============================================================
# Python Tests (fast subset)
# ============================================================
echo "🧪 Running Python tests (fast subset, no integration)..."
if ! python -m pytest tests/ -m "not slow and not integration" --maxfail=3 -q; then
    echo -e "${RED}❌ Python tests failed${NC}"
    echo "   Run full tests with: python -m pytest tests/"
    FAILED=1
else
    echo -e "${GREEN}✅ Python tests passed${NC}"
fi
echo ""

# ============================================================
# Rust Tests (if sidecar exists)
# ============================================================
if [ -d "sidecar" ]; then
    echo "🦀 Running Rust tests..."
    cd sidecar
    if ! cargo test --quiet; then
        echo -e "${RED}❌ Rust tests failed${NC}"
        FAILED=1
    else
        echo -e "${GREEN}✅ Rust tests passed${NC}"
    fi
    cd "$REPO_ROOT"
    echo ""
fi

# ============================================================
# Final Result
# ============================================================
if [ $FAILED -eq 1 ]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}❌ PRE-PUSH CHECKS FAILED${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo "Push blocked. Fix the issues above and try again."
    echo ""
    echo "To bypass this hook (NOT RECOMMENDED):"
    echo "  git push --no-verify"
    echo ""
    exit 1
fi

echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ ALL PRE-PUSH CHECKS PASSED${NC}"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo "Proceeding with push..."
exit 0
